#+TITLE: Emacs Configuration
#+AUTHOR: Nasser Alkmim
* Introduction
This conficuration was copied and modified from [[https://github.com/danielmai/.emacs.d][Daniel's configuration]].

Download [[http://vgoulet.act.ulaval.ca/en/emacs/windows/][Emacs]] from this site which includes the support for png, jpeg images. Or [[http://emacsbinw64.sourceforge.net/][From this site]].
  
This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations. This [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][post]] explain how it works.

This [[http://emacs.stackexchange.com/questions/10396/difference-between-init-and-config-in-use-package][Question]] is useful to understand the differences between init and config. Basically, bind and init are evaluated immediately after start up which contributes to startup time, config is deferred until the pacakge is loaded (by a bind key or a specific mode).

Current load time 1.5s on windows.

* Personal information

 #+begin_src emacs-lisp
(setq user-full-name "Nasser Alkmim"
      user-mail-address "nasser.alkmim@gmail.com")
#+end_src


* Loading config.org

Using the method described here: http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/
*** Package management

#+BEGIN_SRC emacs-lisp
(package-initialize nil)
(setq package-enable-at-startup nil)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;;; Set up package
;; initalize all ELPA packages
(require 'package)
(setq package-enable-at-startup nil
      package-archives
      '(("melpa"           . "http://melpa.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("gnu" . "http://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

*** use-package

See [http://github.com/jwiegley/use-package/]
or http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html

Basic syntax:

#+BEGIN_EXAMPLE
(use-package package-name
	 [:keyword [option]]...)

:init          Code to run before PACKAGE-NAME has been loaded.
:config        Code to run after PACKAGE-NAME has been loaded.  Note that if
			   loading is deferred for any reason, this code does not execute
			   until the lazy load has occurred.
:preface       Code to be run before everything except `:disabled'; this can
			   be used to define functions for use in `:if', or that should be
			   seen by the byte-compiler.
:mode          Form to be added to `auto-mode-alist'.
:interpreter   Form to be added to `interpreter-mode-alist'.
:commands      Define autoloads for commands that will be defined by the
			   package.  This is useful if the package is being lazily loaded,
			   and you wish to conditionally call functions in your `:init'
			   block that are defined in the package.
:bind          Bind keys, and define autoloads for the bound commands.
:bind*         Bind keys, and define autoloads for the bound commands,
			   *overriding all minor mode bindings*.
:bind-keymap   Bind a key prefix to an auto-loaded keymap defined in the
			   package.  This is like `:bind', but for keymaps.
:bind-keymap*  Like `:bind-keymap', but overrides all minor mode bindings
:defer         Defer loading of a package -- this is implied when using
			   `:commands', `:bind', `:bind*', `:mode' or `:interpreter'.
			   This can be an integer, to force loading after N seconds of
			   idle time, if the package has not already been loaded.
:after         Defer loading of a package until after any of the named
			   features are loaded.
:demand        Prevent deferred loading in all cases.
:if EXPR       Initialize and load only if EXPR evaluates to a non-nil value.
:disabled      The package is ignored completely if this keyword is present.
:defines       Declare certain variables to silence the byte-compiler.
:functions     Declare certain functions to silence the byte-compiler.
:load-path     Add to the `load-path' before attempting to load the package.
:diminish      Support for diminish.el (if installed).
:ensure        Loads the package using package.el if necessary.
:pin           Pin the package to an archive.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
(setq use-package-verbose nil)
#+END_SRC

*** use-package defer loading and add-hook

[[https://emacs.stackexchange.com/questions/19695/use-package-defer-t-and-add-hook][This question clarified for me]]

=:commands= will generate an autoload for package-x-function, the =:init= will immediately add it to the hook.
=:commands= implies =:defer=, the package will not load immediately.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package X
  :ensure t
  :commands package-x-function
  :init
  (add-hook 'some-mode 'package-x-function))
#+END_SRC





* Custom settings

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC


* Theme
*** Aprospospriate
#+BEGIN_SRC emacs-lisp :tangle no
(use-package apropospriate-theme
:ensure t
:config
(load-theme 'apropospriate-light t))
#+END_SRC

*** Doom theme 


#+BEGIN_SRC emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :diminish doom-buffer-mode
  :init (load-theme 'doom-one t)
  :config
  ;;; OPTIONAL
  ;; brighter source buffers
  (add-hook 'find-file-hook 'doom-buffer-mode)
  ;; brighter minibuffer when active
  (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)

  ;; Custom neotree theme
  ;; (require 'doom-neotree)
  ;; (setq doom-neotree-enable-file-icons nil)

  ;; org mode configs
  (setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)

  ;;  use it to visually set apart source buffers from popups, the minibuffer, or temporary buffers.
  (add-hook 'find-file-hook 'doom-buffer-mode)
  (use-package all-the-icons
    :disabled t
    :load-path "C:/Users/Nasser/.emacs.d/elpa/all-the-icons"))
#+END_SRC



*** Moe theme 

#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :ensure t
  :config
  (setq moe-theme-highlight-buffer-id nil)
  (setq moe-theme-resize-org-title '(1.3 1.2 1.2 1.2 1.1 1.0 1.0 1.0 1.0))
  (moe-dark))
#+END_SRC


*** Tao theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package tao-theme
  :ensure t
  :defer t)
#+END_SRC



*** Leuven theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package leuven-theme
  :ensure t
  :defer t)
#+END_SRC


*** Anti Zenburn

#+BEGIN_SRC emacs-lisp :tangle no
(use-package anti-zenburn-theme
  :ensure t
  :defer t )
#+END_SRC


*** Cyberpunk theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package cyberpunk-theme
  :defer t
  :ensure t)
#+END_SRC


*** Zenburn

#+BEGIN_SRC emacs-lisp :tangle no
(use-package zenburn-theme
  :ensure t
  :defer t)
#+END_SRC


*** Solarized 

#+BEGIN_SRC emacs-lisp :tangle no
(use-package solarized-theme
  :ensure t
  :defer t)
#+END_SRC


*** Sanityinc tomorrow

#+BEGIN_SRC emacs-lisp :tangle no
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-night)
)
#+END_SRC

*** Gruvbox

#+BEGIN_SRC emacs-lisp :tangle no
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox t)
  (set-face-foreground 'org-block "#fdf4c1")
  )
#+END_SRC

*** Eziam 

#+BEGIN_SRC emacs-lisp :tangle no
(use-package eziam-theme
  :ensure t
  :config
  (load-theme 'eziam-dark t))
#+END_SRC


*** Afternoon

#+BEGIN_SRC emacs-lisp :tangle no
(use-package afternoon-theme
  :ensure t
  :config 
  (load-theme 'afternoon t))
#+END_SRC
*** base 16

#+BEGIN_SRC emacs-lisp :tangle no
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-default-dark t))
#+END_SRC


*** Alect

#+BEGIN_SRC emacs-lisp :tangle no
(use-package alect-themes
  :ensure t
  :config (load-theme 'alect-black))
#+END_SRC

*** Theme looper

#+begin_src emacs-lisp :tangle no
(use-package theme-looper
  :defer t
  :bind ("S-<f12>" . theme-looper-enable-next-theme)
  :init
  (theme-looper-set-theme-set '(                               
                                leuven
                                tao-yang
                                anti-zenburn
                                 zenburn
                                cyberpunk
                                ;solarized-light
                                sanityinc-tomorrow-day
                                ))
  (theme-looper-set-customizations 'powerline-reset))
#+end_src


the function load-theme will first disable the active themes, before loading the new one.

#+BEGIN_SRC emacs-lisp :tangle no
(defun disable-all-themes ()
  "disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes))
#+END_SRC

#+RESULTS:
: load-theme


* Font

Download 

| [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]     |
| [[https://www.fontsquirrel.com/fonts/download/dejavu-sans][Dejavu Sans]]         |
| [[https://fontlibrary.org/pt/font/fantasque-sans-mono][Fantasque Sans mono]] |
| [[http://leonardo-m.livejournal.com/77079.html][Inconsolata g]]       |



#+begin_src emacs-lisp
;; (set-face-attribute 'default nil :font "Dejavu Sans 10") 
;; (set-face-attribute 'default nil :font "Source Code Pro 10")
;; (set-face-attribute 'default nil :font "Office Code Pro D 10")
;; (set-frame-font "Source Code Pro 10")  
;; (set-frame-font "Lucida Sans Unicode 10")
;; (set-frame-font "Monospace 10")
;; (set-frame-font "Fantasque Sans Mono 11")
;; (set-frame-font "Inconsolata-g 10")
#+end_src

#+BEGIN_SRC emacs-lisp
;; set a default font
(when (member "Office Code Pro D" (font-family-list))
  (set-face-attribute 'default nil :font "Office Code Pro D 9"))

;; specify font for all unicode characters
(when (member "Dejavu Sans" (font-family-list))
  (set-fontset-font t 'unicode "Dejavu Sans" nil 'prepend))
#+END_SRC

* Common defaults

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; from Sacha page
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

  (setq-default indent-tabs-mode nil)

  ;; use shift-arrows to move between windows
  (windmove-default-keybindings)

  ;; highlight current line
  ;; (global-hl-line-mode 1)
  ;; (set-face-background 'hl-line "SlateGray1")

  ; wrap lines
  ;; (global-visual-line-mode)
  ;; (diminish 'visual-line-mode)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)


  (column-number-mode t)

  ;; unprettify symbol when at right edge
  (setq prettify-symbols-unprettify-at-point 'right-edge) 

  (setq uniquify-buffer-name-style 'forward)


  ;; Don't beep at me
  (setq visible-bell t)

  ;; Don't create backups
  (setq make-backup-files nil)
#+end_src




*** Debug

#+BEGIN_SRC emacs-lisp :tangle no
;(setq debug-on-error t)
;(setq debug-on-quit t)
#+END_SRC

*** Fringe

#+BEGIN_SRC emacs-lisp
(set-fringe-mode 0)
#+END_SRC
*** go to line

http://whattheemacsd.com/

#+BEGIN_SRC emacs-lisp
(global-set-key [remap goto-line] 'goto-line-with-feedback)

(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)))
#+END_SC


* Recentf

Recentf is a minor mode that builds a list of recently opened files.

#+begin_src emacs-lisp
(use-package recentf
  :defer 30
  :config
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 500
          recentf-max-menu-items 15))
  (run-at-time (current-time) 300 'recentf-save-list))
#+end_src


* Org mode
*** Org itself


#+BEGIN_SRC emacs-lisp
(use-package org  
  :ensure org-plus-contrib
  :load-path "~/.emacs.d/elpa/org-plus-contrib-20161102"
  :mode (("\\.org$" . org-mode))
  :bind(("C-c a" . org-agenda)
        ("C-c l" . org-store-link)
        ("C-c c" . org-capture)
        ("M-p" . org-previous-item)
        ("M-n" . org-next-item))
  :init (require 'org)
  :config
  (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
)
#+END_SRC


*** General options
Speed up commands. See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for speed eys in Org mode]]. 

General options.
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-special-ctrl-a/e t)
  (transient-mark-mode nil)
  (setq org-log-done 'time) ;Log the time a task is completed.
  (setq org-habit-graph-column 50) ;position the habit graph on the agenda to the right of he defaul 
  (setq org-hide-emphasis-markers t) 
  (setq inhibit-splash-screen t)
  (setq org-indent-mode t) ;indent the headings for clean view
  (setq org-hide-leading-stars t) 
  (setq org-hide-leading-stars-before-indent-mode t)
  (setq org-odd-levels-only t)
  (diminish 'org-indent-mode)
  (setq org-startup-indented t)
  ;; (setq org-tags-column -66) ;where the tags are places
  (setq org-use-speed-commands t)
  (setq org-edit-src-content-indentation 0)
  (setq org-support-shift-select t)
  (setq line-spacing '0.1 )

  ;; This is for remove the annoying background color on the headings, 
  ;; level 1 and level 2, when using the material-theme. 
  (custom-set-faces
   '(org-level-1 ((t (:background nil :bold t :overline nil))))
   '(org-level-2 ((t (:background nil :bold t :overline nil)))))

  (set-face-attribute 'org-meta-line nil :height 0.8 :slant 'normal :foreground "grey75")
  (set-face-attribute 'org-special-keyword nil :height 0.8 :slant 'normal :foreground "grey75")

  ;; (custom-set-faces
  ;;  '(org-level-1 ((t (:bold t  :height 1.2 ))))
  ;;  '(org-level-2 ((t (:inherit outline-2 :bold t  :height 1.0))))
  ;;  '(org-level-3 ((t (:inherit outline-3 :bold t :height 1.0))))
  ;;  '(org-level-4 ((t (:inherit outline-4 :bold t :height 1.0))))
  ;;  '(org-level-5 ((t (:inherit outline-5 :bold t :height 1.0)))))

  
  (setq org-agenda-weekend-days nil)

  (setq org-modules '(org-habit))
  (eval-after-load 'org
    '(org-load-modules-maybe t))


  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf::\\([0-9]+\\)\\'" . "sumatrapdf \"%s\" -page %1")
                        ("\\.pdf\\'" . default)))

  )
 #+END_SRC
 
*** Ox extra

#+BEGIN_SRC emacs-lisp
(use-package org
:defer t
:config
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+END_SRC
*** Ob ipython modifications

From [[http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/?utm_source=feedburner&utm_medium=twitter&utm_campaign=Feed%3A+TheKitchinResearchGroup+%28The+Kitchin+Research+Group%29#org36f9eed][John Kitchin]]

https://github.com/jkitchin/scimax/blob/master/scimax-org-babel-ipython.el#L100

#+BEGIN_SRC emacs-lisp
(defun ob-ipython-inline-image (b64-string)
  "Write the B64-STRING to a file.
Returns an org-link to the file."
  (let* ((f (md5 b64-string))
	 (d "ipython-inline-images")
	 (tfile (concat d "/ob-ipython-" f ".png"))
	 (link (format "[[file:%s]]" tfile)))
    (unless (file-directory-p d)
      (make-directory d))
    (ob-ipython--write-base64-string tfile b64-string)
    link))


(defun ob-ipython--async-callback (status &rest args)
  "Callback function for `ob-ipython--execute-request-asynchronously'.
It replaces the output in the results."
  (let* ((ret (ob-ipython--eval (if (>= (url-http-parse-response) 400)
				    (ob-ipython--dump-error (buffer-string))
				  (goto-char url-http-end-of-headers)
				  (let ((json-array-type 'list))
				    (json-read)))))
	 (result (cdr (assoc :result ret)))
	 (output (cdr (assoc :output ret)))
	 result-type)
    (with-current-buffer *async-ob-ipython*
      (save-excursion
	(goto-char (point-min))
	(when (re-search-forward "async-abcd-1234-\\(output\\|value\\)" nil t)
	  (setq result-type (match-string 1))
	  (replace-match "")
	  (cond
	   ((string= "output" result-type)
	    (insert
	     (concat
	      (s-trim output)
	      (format "%s"
		      (mapconcat
		       'identity
		       (loop for res in result
			     ;; if (and (eq 'text/plain (car res)) (cdr res))
			     ;; collect (cdr res)
			     if (eq 'text/html (car res))
			     collect (format "#+BEGIN_EXPORT HTML\n%s\n#+END_EXPORT\n"
					     (cdr res))
			     if (eq 'text/latex (car res))
			     collect (format "#+BEGIN_EXPORT latex\n%s\n#+END_EXPORT\n"
					     (cdr res))
			     if (eq 'image/png (car res))
			     collect (ob-ipython-inline-image (cdr res)))
		       "\n")))))
	   ((string= "value" result-type)
	    (insert
	     (cdr (assoc 'text/plain result)))))
	  (org-redisplay-inline-images))))
    (setq *async-ob-ipython* nil)))


(defun ob-ipython--execute-request-asynchronously (code name)
  "This function makes an asynchronous request.
A callback function replaces the results."
  (let ((url-request-data code)
        (url-request-method "POST"))
    (url-retrieve
     (format "http://%s:%d/execute/%s"
	     ob-ipython-driver-hostname
	     ob-ipython-driver-port
	     name)
     ;; the callback function
     'ob-ipython--async-callback)))


;; This overwrites the ob-ipython function and adds better inline image support,
;; and adds async support.
(defun org-babel-execute:ipython (body params)
  "Execute a block of IPython code with Babel.
This function is called by `org-babel-execute-src-block'."
  (let* ((file (cdr (assoc :file params)))
         (session (cdr (assoc :session params)))
	 (async (cdr (assoc :async params)))
         (result-type (cdr (assoc :result-type params)))
	 results)
    (org-babel-ipython-initiate-session session params)

    ;; Check the current results for inline images and delete the files.
    (let ((location (org-babel-where-is-src-block-result))
	  current-results)
      (when location
	(save-excursion
	  (goto-char location)
	  (when (looking-at (concat org-babel-result-regexp ".*$"))
	    (setq results (buffer-substring-no-properties
			   location
			   (save-excursion
			     (forward-line 1) (org-babel-result-end)))))))
      (with-temp-buffer
	(insert (or results ""))
	(goto-char (point-min))
	(while (re-search-forward
		"\\[\\[file:\\(ipython-inline-images/ob-ipython-.*?\\)\\]\\]" nil t)
	  (let ((f (match-string 1)))
	    (when (file-exists-p f)
	      (delete-file f))))))
    
    (if async
	(progn
	  ;; this limits us to running one async process at a time. It does not
	  ;; support multiple sessions in one org-file.
	  (save-excursion
	    (goto-char (point-min))
	    (when (re-search-forward "async-abcd-1234" nil t)
	      (error "It looks like an async process is already running")))
	  (setq *async-ob-ipython* (current-buffer))
	  (ob-ipython--execute-request-asynchronously
	   (org-babel-expand-body:generic
	    (encode-coding-string body 'utf-8)
	    params (org-babel-variable-assignments:python params))
	   (ob-ipython--normalize-session session))
	  (format "async-abcd-1234-%s" result-type))
      
      (-when-let (ret (ob-ipython--eval
		       (ob-ipython--execute-request
			(org-babel-expand-body:generic
			 (encode-coding-string body 'utf-8)
			 params (org-babel-variable-assignments:python params))
			(ob-ipython--normalize-session session))))
	(let ((result (cdr (assoc :result ret)))
	      (output (cdr (assoc :output ret))))
	  (if (eq result-type 'output)
	      (concat
	       output
	       (format "%s"
		       (mapconcat 'identity
				  (loop for res in result
					;; if (and (eq 'text/plain (car res)) (cdr res))
					;; collect (cdr res)
					if (eq 'text/html (car res))
					collect (format
						 "#+BEGIN_EXPORT HTML\n%s\n#+END_EXPORT\n"
						 (cdr res))
					if (eq 'text/latex (car res))
					collect (format
						 "#+BEGIN_EXPORT latex\n%s\n#+END_EXPORT\n"
						 (cdr res))
					if (eq 'image/png (car res))
					collect (ob-ipython-inline-image (cdr res)))
				  "\n")))
	    ;; The result here is a value. We should still get inline images though.
	    (ob-ipython--create-stdout-buffer output)
	    (concat
	     (->> result (assoc 'text/plain) cdr)
	     (format "\n%s"
		     (mapconcat 'identity
				(loop for res in result
				      ;; if (and (eq 'text/plain (car res)) (cdr res))
				      ;; collect (cdr res)
				      if (eq 'text/html (car res))
				      collect (format
					       "#+BEGIN_EXPORT HTML\n%s\n#+END_EXPORT\n"
					       (cdr res))
				      if (eq 'text/latex (car res))
				      collect (format
					       "#+BEGIN_EXPORT latex\n%s\n#+END_EXPORT\n"
					       (cdr res))
				      if (eq 'image/png (car res))
				      collect (ob-ipython-inline-image (cdr res)))
				"\n")))))))))


(defun org-babel-execute-async:ipython (&optional arg)
  (interactive)
  (let* ((body (org-element-property :value (org-element-context)))
	 (params (nth 2 (org-babel-get-src-block-info)))
	 (file (cdr (assoc :file params)))
         (session (cdr (assoc :session params)))
	 (async (cdr (assoc :async params)))
	 (results (cdr (assoc :results params)))
         (result-type (cdr (assoc :result-type params))))
    (org-babel-ipython-initiate-session session params)
    
    (if (not async)
	(org-babel-execute:ipython body params)
      ;; Check the current results for inline images and delete the files.
      (let ((location (org-babel-where-is-src-block-result))
	    current-results)
	(when location
	  (save-excursion
	    (goto-char location)
	    (when (looking-at (concat org-babel-result-regexp ".*$"))
	      (setq current-results (buffer-substring-no-properties
				     location
				     (save-excursion
				       (forward-line 1) (org-babel-result-end)))))))
	(with-temp-buffer
	  (insert (or current-results ""))
	  (goto-char (point-min))
	  (while (re-search-forward
		  "\\[\\[file:\\(ipython-inline-images/ob-ipython-.*?\\)\\]\\]" nil t)
	    (let ((f (match-string 1)))
	      (when (file-exists-p f)
		(delete-file f))))))
      ;; Now we run the async
      (save-excursion
	(goto-char (point-min))
	(when (re-search-forward "async-abcd-1234" nil t)
	  (error "It looks like an async process is already running")))
      
      (setq *async-ob-ipython* (current-buffer))
      (org-babel-remove-result)
      (org-babel-insert-result (format "async-abcd-1234-%s" result-type)
			       (split-string  results " " t))
      (save-excursion
	(re-search-forward (format "async-abcd-1234-%s" result-type))
	(flyspell-delete-region-overlays (match-beginning 0) (match-end 0))
	(let ((map (make-sparse-keymap)))
	  (define-key map [mouse-1]
	    `(lambda ()
	       (interactive)
	       (message "Interrupting the kernel.")
	       (save-excursion
		 (org-babel-previous-src-block)
		 (org-babel-remove-result))
	       (ob-ipython-interrupt-kernel (cdr (assoc
						  (or ,session "default")
						  (ob-ipython--get-kernel-processes))))))
	  (set-text-properties
	   (match-beginning 0) (match-end 0)
	   `(font-lock-face (:foreground "red")
			    local-map ,map
			    mouse-face highlight
			    help-echo "Click to interrupt async process"))))
      (setq font-lock-extra-managed-props (delq 'local-map font-lock-extra-managed-props))
      ;; finally call the async command.
      (message "running async")
      (ob-ipython--execute-request-asynchronously
       (org-babel-expand-body:generic
	(encode-coding-string body 'utf-8)
	params (org-babel-variable-assignments:python params))
       (ob-ipython--normalize-session session)))))
#+END_SRC

#+RESULTS:
: org-babel-execute-async:ipython

https://github.com/gregsexton/ob-ipython/issues/28
#+BEGIN_SRC emacs-lisp
(setq python-shell-completion-native-enable nil) 
(setq python-shell-prompt-detect-failure-warning nil)
#+END_SRC

*** +Ox koma letter+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
  :defer t
  :config
  (eval-after-load 'ox '(require 'ox-koma-letter))

  (eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "letter")))
)
#+END_SRC

*** Images config

Start up folded, lists will be folded when file is opened. Don't remember where I got that.

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-cycle-include-plain-lists 'integrate)

  (setq org-image-actual-width t)
  (setq org-startup-with-inline-images t))
 #+END_SRC
 

Org display inline images when starts up, [[http://emacs.stackexchange.com/questions/14758/in-org-mode-how-to-always-display-inline-images-at-emacs-startup][From this question]]. For change the width of images.
*** Org bullets

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-ellipsis " …")
    (setq org-bullets-bullet-list '("•"))))
#+END_SRC


*** Org reveal

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package ox-reveal 
    :ensure t
    :defer 10
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)))
#+END_SRC


*** Org beamer

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package ox-beamer
    :defer 10
    :config
    (progn
      ;; allow for export=>beamer by placing
      ;; #+LaTeX_CLASS: beamer in org files
      (add-to-list 'org-latex-classes
                   '("beamer"
                     "\\documentclass[presentation]{beamer}"
                     ("\\section{%s}"        . "\\section*{%s}")
                     ("\\subsection{%s}"     . "\\subsection*{%s}")
                     ("\\subsubsection{%s}"  . "\\subsubsection*{%s}"))))))
#+END_SRC


*** Org latex

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package ox-latex
    :defer 5
    :config
    ;; code highlight for latex org export
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    ;; add a nice font to org latex export
    (add-to-list 'org-latex-packages-alist '("" "fouriernc"))

    ;; For code fragments typesetting
    ;; http://orgmode.org/worg/org-tutorials/org-latex-preview.html
    (setq org-latex-listings 'minted))

  (add-to-list 'org-latex-minted-langs '(ipython "python"))
  
; change foreground color of latex macros inside org
  (setq org-highlight-latex-and-related '(latex script entities))
  (set-face-foreground 'org-latex-and-related "blue")

  (setq org-latex-create-formula-image-program 'imagemagick)
)
#+END_SRC


*** Org block background


#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config 
  ;; (setq org-src-block-faces '(("emacs-lisp" (:background "GhostWhite"))
  ;;                           ("python" (:background "GhostWhite"))
  ;;                           ("ipython" (:background "GhostWhite"))
  ;;                           ("plantuml" (:background "GhostWhite"))
  ;;                           ("latex" (:background "GhostWhite"))
  ;;                           ("shell" (:background "GhostWhite"))))
  ;;  
  
   ;; (setq org-src-block-faces '(("emacs-lisp" (:background "#2d2d2d"))
   ;;                           ("python" (:background "#2d2d2d"))
   ;;                           ("ipython" (:background "#2d2d2d"))
   ;;                           ("plantuml" (:background "#2d2d2d"))
   ;;                           ("latex" (:background "#2d2d2d"))
   ;;                         ("shell" (:background "#2d2d2d"))))
  )
#+END_SRC



*** Org download

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package org-download
   :ensure t
   :defer 10
   :config
   (setq-default org-download-image-dir "./img/")
   (setq-default org-download-heading-lvl nil)))
#+END_SRC


*** Org babel config

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
 
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (emacs-lisp . t)
       (latex . t)
       (plantuml . t)
       (shell . t)))

  ;; plantuml jar file path
  (setq org-plantuml-jar-path
          (expand-file-name "~/.emacs.d/plantuml.jar"))

  (setq org-babel-default-header-args:python
        '((:results . "output pp")
          (:exports . "both")))

  ;; Org babel and source blocks
  (setq org-src-fontify-natively t
        org-highlight-latex-and-related '(latex)
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t ; preserve indentation in code
        org-adapt-indentation nil; Non-nil means adapt indentation to outline node level.
        org-src-tab-acts-natively t
        org-export-babel-evaluate nil
        org-confirm-babel-evaluate nil) ; doesn't ask for confirmation

  ;; dont guess the indent offset
  (setq python-indent-guess-indent-offset nil)
  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
#+END_SRC

*** Ob-async

#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :ensure t
  :config
  (add-to-list 'org-ctrl-c-ctrl-c-hook 'ob-async-org-babel-execute-src-block))
#+END_SRC


*** Org ref

#+BEGIN_SRC emacs-lisp
(use-package org 
  :defer t
  :config
  (use-package org-ref
    :defer 10
    :ensure t
    :config
    (setq org-ref-default-bibliography 
          '("C:/Users/Nasser/OneDrive/Bibliography/references-zot.bib"))
    (setq org-ref-pdf-directory 
          '("C:/Users/Nasser/OneDrive/Bibliography/references-pdf/"
            "C:/Users/Nasser/OneDrive/Bibliography/references-etc/"))
            (setq org-ref-completion-library 'org-ref-ivy-bibtex)
            (org-ref-ivy-cite-completion)))
#+END_SRC



*** Todo sequences

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-todo-keywords '((sequence "TODO(t)" "DONE(d)")))

  (setq org-todo-keyword-faces 
        '(("TODO" :background "tomato" :foreground "#5f5f5f" :weight bold )
          ("STRT" :background "#edd400" :foreground "#5f5f5f" :weight bold )
          ("DONE" :background "#6ac214" :foreground "#5f5f5f" :weight bold )))
  
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-cycle-separator-lines 0)) 
#+END_SRC


From [[http://stackoverflow.com/questions/28351465/emacs-orgmode-do-not-insert-line-between-headers][This question]], an option for org mode not insert a line between headings.

[[http://orgmode.org/manual/Headlines.html][This reference]] is used to remove an annoying feature of not hiding extra lines in a subtree



*** Org Clock
From [[https://github.com/jbranso/.emacs.d/blob/master/lisp/init-org.org#my-org-capure-templates][this]] settings,

#+BEGIN_SRC emacs-lisp
(use-package org-clock
  :defer t
  :config
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persistence-insinuate t)
  (setq org-clock-persist t)
  (setq org-clock-in-resume t)
  (setq org-clock-mode-line-total 'current)
  

  ;; Change task state to STARTED when clocking in
  ;; (setq org-clock-in-switch-to-state "STRT")
  ;; Save clock data and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t))
#+END_SRC



*** Org paste from clipboard

Function for pasting images from clipboard. I got this from [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-11/msg00290.html][this thread]]. It's very useful hen I'm writing notes while studying, great for reviewing the notes later.

+Now it creates a folder called "img/" where all the figures are going to be saved.+

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :bind ("C-c y" . my/org-insert-clipboard)
  :config
  (defun my/org-insert-clipboard ()
    (interactive)
    ;make the img directory
    (setq myvar/folder-path (concat default-directory "img/"))
    ;create the directory if it doesn't exist
    (if (not (file-exists-p myvar/folder-path))
        (mkdir myvar/folder-path))

    (let* ((image-file (concat 
                        myvar/folder-path
                        (buffer-name)
                        "_"
                        (format-time-string "%Y%m%d_%H%M%S_.png")))

           (exit-status
            (call-process "convert" nil nil nil
                          "clipboard:" image-file)))

      (org-insert-link nil (concat "file:" image-file) "")

      (org-display-inline-images))))
#+END_SRC


*** Org tree slide

#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
    :ensure t
    :bind (("<f9>" . org-tree-slide-mode)
           ("<f12>" . org-tree-slide-move-next-tree)
           ("<f11>" . org-tree-slide-move-previous-tree)
           ("C-<f12>" . org-babel-next-src-block)
           ("C-<f11>" . org-babel-previous-src-block))
    :config
    (global-set-key (kbd "S-<f9>") 'org-tree-slide-skip-done-toggle)
    (org-tree-slide-simple-profile)
    (setq org-tree-slide-modeline-display 'outside)

    ;; hide markups
    (use-package hide-lines :ensure t)
    (defun my:hide-headers ()
      (interactive)
        (hide-lines-matching "#\\+BEGIN_SRC")
        (hide-lines-matching "#\\+END_SRC")
        (hide-lines-matching "#\\+RESULTS:"))
    (defun my:show-headers ()
      (hide-lines-show-all))
    ;; (add-hook 'org-tree-slide-play-hook 'my:hide-headers)
    ;; (add-hook 'org-tree-slide-stop-hook 'hide-lines-show-all)
    ;; (add-hook 'org-src-mode-hook 'my:hide-headers)
)
#+END_SRC


*** Org page

[[https://github.com/kelvinh/org-page][Org-page]] - A package for generate a static blog.

#+BEGIN_SRC emacs-lisp
(use-package org-page
  :ensure t
  :bind (("C-x C-a p" . op/do-publication-and-preview-site)
         ("C-x C-a C-p" . op/do-publication)
         ("C-x C-a C-n" . op/new-post))
  :config
  (setq op/repository-directory "c:/Users/Nasser/OneDrive/nasseralkmim.github.io/")
  (setq op/site-domain "http://nasseralkmim.github.io/")
  (setq op/personal-disqus-shortname "nasseralkmim")
  (setq op/site-main-title "Nasser Alkmim")
  (setq op/site-sub-title " ")
  (setq op/personal-github-link "https://github.com/nasseralkmim")
  (setq op/personal-google-analytics-id "UA-74704246-1")

  (setq op/tag-rss t)                   ;rss for each tag

  (setq op/theme-root-directory "c:/Users/Nasser/OneDrive/nasseralkmim.github.io/themes/")
  (setq op/theme 'mdo)

  (setq op/category-ignore-list '("themes" "assets" "blog"))

(setq op/category-config-alist
      '(("notes" ;; this is the default configuration
         :label "Notes"
         :show-meta t
         :show-comment t
         :uri-generator op/generate-uri
         :uri-template "/notes/%y/%m/%d/%t/"
         :sort-by :date     ;; how to sort the posts
         :category-index t) ;; generate category index or not
        ("index"
         :show-meta nil
         :show-comment nil
         :uri-generator op/generate-uri
         :uri-template "/"
         :sort-by :date
         :category-index nil)
        ("about"
         :show-meta nil
         :show-comment nil
         :uri-generator op/generate-uri
         :uri-template "/about/"
         :sort-by :date
         :category-index nil))))
#+end_src

*** Org agenda


#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-agenda-files (quote ("~/OneDrive/Org/gtd.org"
                                 "~/OneDrive/Org/notes.org"
                                 "~/OneDrive/Org/journal.org"
                                 "~/OneDrive/Org/gcal.org"
                                 "~/OneDrive/TerraCap/terracap_notes.org")))

  (setq 
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-skip-timestamp-if-done t)

   (setq org-default-notes-file "~/OneDrive/Org/notes.org")

   
   (setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((agenda "")
          (todo "TODO")))))
   
   ;; (global-set-key (kbd "C-c o") 
   ;;                 (lambda () (interactive) 
   ;;                   (find-file "~/OneDrive/Org/notes.org")))

   (setq org-capture-templates
        '(("t" "Todo" entry (file+datetree "~/OneDrive/Org/gtd.org") 
           "* TODO %? \n\n Added: %T")
          ("n" "Notes" entry (file+datetree "~/OneDrive/Org/notes.org") 
           "* %^{Description} %^g \n\n %? \n\n Added: %T")
          ("j" "Journal" entry (file+datetree "~/OneDrive/Org/journal.org") 
           "* %T \n\n%?"))))
#+END_SRC



*** Show next/prev heading tidily 

http://orgmode.org/worg/org-hacks.html

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(add-to-list 'org-speed-commands-user
             '("n" ded/org-show-next-heading-tidily))
(add-to-list 'org-speed-commands-user
             '("p" ded/org-show-previous-heading-tidily)))
#+END_SRC


*** Org gcal

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer
  :config
  (use-package org-gcal
    :ensure t
    :disabled t
    :config
    (setq org-gcal-client-id "1083156545268-4amskf4uvdeqe7e0u8f4hjvnuslp54vl.apps.googleusercontent.com"
      org-gcal-client-secret "AETRQ7SppHH3NToGQjMJyscw"
      org-gcal-file-alist '(("nasser.alkmim@gmail.com" .  "~/OneDrive/Org/gcal.org")))
    
    (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
    (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync))))
)
#+END_SRC

* Shell

#+begin_src emacs-lisp
(defun my/open-cmd()
  (interactive)
  (let ((proc (start-process "cmd" nil "cmd.exe" "/C" "start" "cmd.exe")))
    (set-process-query-on-exit-flag proc nil)))

(bind-key "C-x m" 'my/open-cmd)
#+end_src


* ELPA packages
*** Avy mode

[[https://github.com/abo-abo/avy][Avy-mode]]

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t 
  :diminish avy-mode
  :bind (("C-x C-SPC" . avy-goto-char)
         ("C-x C-x" . avy-goto-word-or-subword-1)
         ("C-x C-l" . avy-goto-line)))
#+END_SRC

*** dumb jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :init
  (dumb-jump-mode))
#+END_SRC

*** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t 
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  :bind ("C-o " . ace-window))
#+end_src

*** Counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-s" . counsel-grep-or-swiper)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function)
         ("C-x C-f" . counsel-find-file))
  :config
  (use-package smex :ensure t))
#+END_SRC


*** Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  ;; Disable ido
  (with-eval-after-load 'ido
    (ido-mode -1)
    ;; Enable ivy
    (ivy-mode 1))
  ;; for recent candidates
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))

  ;; ;; Show recently killed buffers when calling ivy-switch-buffer
  (setq ivy-use-virtual-buffers t)
  ;; (setq ivy-virtual-abbreviate 'full) ; Show the full virtual file paths
  ;; ;; Do not show "./" and "../" in the counsel-find-file completion list
  (setq ivy-extra-directories nil)

  (use-package ivy-rich
    :ensure t
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
    (setq ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t)
    (setq ivy-rich-abbreviate-paths t))
)
#+END_SRC


*** Ivy Bibtex

=M-o= show the different actions 

#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :bind ("C-c b b" . ivy-bibtex)
  :config
  (setq bibtex-completion-bibliography 
        '("C:/Users/Nasser/OneDrive/Bibliography/references-zot.bib"))
  (setq bibtex-completion-library-path 
        '("C:/Users/Nasser/OneDrive/Bibliography/references-pdf"
          "C:/Users/Nasser/OneDrive/Bibliography/references-etc"))

  ;; using bibtex path reference to pdf file
  (setq bibtex-completion-pdf-field "File")

  ;;open pdf with external viwer foxit
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (call-process "SumatraPDF" nil 0 nil fpath)))

  (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation))
#+END_SRC

#+RESULTS:


*** Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-c u" . swiper-all))
  :config
  (setq swiper-include-line-number-in-search t))
#+END_SRC

*** Hydra

#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t)

;; better look M-o for ivy
(use-package ivy-hydra :ensure t)
#+END_SRC

***** Find file with "xf"

#+BEGIN_SRC emacs-lisp :tangle no
;; Find file with xf
(defun x-hydra-pre ()
  (insert "x")
  (let ((timer (timer-create)))
    (timer-set-time timer (timer-relative-time (current-time) 0.5))
    (timer-set-function timer 'hydra-keyboard-quit)
    (timer-activate timer)))

(defhydra x-hydra (:body-pre x-hydra-pre
                   :color blue
                   :hint nil)
  ("f" (progn (zap-to-char -1 ?x) (counsel-find-file))))

(global-set-key "x" #'x-hydra/body)
#+END_SRC

***** window resize

#+BEGIN_SRC emacs-lisp
(defun my-funcs/resize-window-down ()
  "Resize a window downwards."
  (interactive)
  (if (window-in-direction 'below)
      (enlarge-window 1)
    (shrink-window 1)))

(defun my-funcs/resize-window-up ()
  "Resize a window upwards."
  (interactive)
  (if (window-in-direction 'above)
      (enlarge-window 1)
    (shrink-window 1)))

(defun my-funcs/resize-window-left ()
  "Resize a window leftwards."
  (interactive)
  (if (window-in-direction 'left)
      (enlarge-window-horizontally 1)
    (shrink-window-horizontally 1)))

(defun my-funcs/resize-window-right ()
  "Resize a window rightwards."
  (interactive)
  (if (window-in-direction 'right)
      (enlarge-window-horizontally 1)
    (shrink-window-horizontally 1)))

(defhydra hydra-window-resize (global-map "C-c w")
    "Window resizing"
    ("j" my-funcs/resize-window-down "down")
    ("k" my-funcs/resize-window-up "up")
    ("l" my-funcs/resize-window-right "right")
    ("h" my-funcs/resize-window-left "left"))
#+END_SRC



*** Magit


A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t 
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  
  ;;This setting is needed to use ivy completion:
  (setq magit-completing-read-function 'ivy-completing-read)
  
  ;; full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen)))
#+end_src


*** Projectile

C-u C-c p f invalidate and find file

#+begin_src emacs-lisp
(use-package counsel-projectile
  :ensure t
  :bind ("C-c p p " . counsel-projectile-switch-project)
  :config
  (counsel-projectile-on)
  (use-package projectile
    :ensure t 
    :diminish projectile-mode
    :init
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy) ;So projectile works with ivy
    (setq projectile-indexing-method 'alien)))
 #+end_src
 
*** Python

Integrates with Python.

#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq warning-suppress-types '((python)
                                 (emacs)))
  ;; https://emacs.stackexchange.com/questions/24453/weird-shell-output-when-using-ipython-5/24572#24572
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt -i")

  ;; suppress the warning "python.el: native completion setup failed"
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))


  ;; solve indentation issues inside docstring
  (defun my-python-indent-line ()
    (if (eq (car (python-indent-context)) :inside-docstring)
        'noindent
      (python-indent-line)))

  (defun my-python-mode-hook ()
    (setq indent-line-function #'my-python-indent-line))
  (add-hook 'python-mode-hook #'my-python-mode-hook)
  )
#+end_src

***** Highlight indent guide

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :after python
  :init
  (add-hook 'python-mode-hook 'highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'fill))
#+END_SRC
***** Company jedi

#+BEGIN_SRC emacs-lisp
;; doesnt work
(use-package company-jedi
  :disabled t
  :ensure t
  :init
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-jedi)))
#+END_SRC

***** Elpy

#+BEGIN_SRC emacs-lisp
(use-package elpy 
  :ensure t
  :after python
  :config
  (elpy-enable)

  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (remove-hook 'elpy-modules 'elpy-module-company)
  (delete 'elpy-module-flymake elpy-modules)

  ;; use py.test
  (setq elpy-test-runner 'elpy-test-pytest-runner)
  
  (defun elpy-goto-definition-or-rgrep ()
    "Go to the definition of the symbol at point, if found. Otherwise, run `elpy-rgrep-symbol'."
    (interactive)
    (ring-insert find-tag-marker-ring (point-marker))
    (condition-case nil (elpy-goto-definition)
      (error (elpy-rgrep-symbol
              (concat "\\(def\\|class\\)\s" (thing-at-point 'symbol) "(")))))
  (define-key elpy-mode-map (kbd "M-.") 'elpy-goto-definition-or-rgrep))
#+END_SRC

***** Anaconda mode


#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :after python
  :init
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  :config
  (use-package company-anaconda
    :ensure t
    :after company
    :config
    (setq jedi:complete-on-dot t)
    (setq company-minimum-prefix-length 1)
    (add-to-list 'company-backends '(company-anaconda :with company-capf))))
#+END_SRC

*** Smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t 
  :commands smartparens-mode
  :init
  (add-hook 'prog-mode-hook 'smartparens-mode)
  :config
  (show-smartparens-global-mode t)
  (sp-local-pair 'org-mode "_" "_" )
  (sp-local-pair 'latex-mode "$" "$" )
  (sp-local-pair 'latex-mode "\\left(" "\\right)" :trigger "\\l(")

  ;; highligh matching brackets
  (show-paren-mode 1) 
  (setq show-paren-style 'expression)
  ;; (custom-set-faces 
  ;;   '(show-paren-match ((((class color) (background light)) 
  ;;                        (:background "papaya whip")))))
  )
#+end_src


*** AucTex


Enable [[https://www.gnu.org/software/auctex/manual/auctex.html][Auctex]] when files with .tex are loaded. Tex-master is  useful to make Auctex aware of multi-files documents. TeX-PDF mode is used to compile using pdflatex.

#+begin_src emacs-lisp
(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (flyspell-mode)
              (prettify-symbols-mode)
              (LaTeX-math-mode)
              (smartparens-mode)
              (turn-on-reftex)
              (reftex-isearch-minor-mode)))
  
  (add-hook 'LaTeX-mode-hook #'outline-minor-mode)

  ;; enable tex fold mode and fold buffer
  (add-hook 'LaTeX-mode-hook 
          (lambda ()
            (TeX-fold-mode 1)
            (add-hook 'find-file-hook 'TeX-fold-buffer t)))
 
  (add-hook 'LaTeX-mode-hook 'company-mode)

  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
  (setq global-font-lock-mode t)
  
  ;; Method for enabling forward and inverse search 
  (setq TeX-source-correlate-method 'synctex)
  ;; inhibit the question to start a server process
  (setq TeX-source-correlate-start-server t)

   ;; Update PDF buffers after successful LaTeX runs
  ;; http://emacs.stackexchange.com/questions/19472/how-to-let-auctex-open-pdf-with-pdf-tools
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
             #'TeX-revert-document-buffer)

  ;; latex commands
  (setq LaTeX-command "latex --synctex=1 -shell-escape")

  ;; use sumatra to view pdf
  ;; http://stackoverflow.com/questions/14448606/sync-emacs-auctex-with-sumatra-pdf
  ;; -set-color-range #fdf4c1 #282828
  (setq TeX-view-program-list
        '(("Sumatra PDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance"
                          (mode-io-correlate " -forward-search %b %n ") " %o"))))

  ;; jump to source
  (setq TeX-source-correlate-mode t)

  (eval-after-load 'tex
  '(progn
     (assq-delete-all 'output-pdf TeX-view-program-selection)
     (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF"))))
)
#+end_src

#+RESULTS:


#+BEGIN_SRC emacs-lisp
(defhydra hydra-outline (:color pink :hint nil)
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_q_: sublevels     _a_: all         _u_: up
_t_: body          _e_: entry       _n_: next visible
_o_: other         _i_: children    _p_: previous visible
_c_: entry         _k_: branches    _f_: forward same level
_l_: leaves        _s_: subtree     _b_: backward same level
_d_: subtree   _<tab>_: cycle

"
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ("<tab>" org-cycle)
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave"))

(global-set-key (kbd "C-c o") 'hydra-outline/body) ; by exambple
#+END_SRC

*** Latex preview pane

shell-escape mode because the pacakge svg requires it.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package latex-preview-pane
  :disabled t
  :bind ("M-p" . latex-preview-pane-mode)
  :config
  (setq doc-view-ghostscript-program "gswin64c")
  
  (custom-set-variables
   '(shell-escape-mode "-shell-escape")
   '(latex-preview-pane-multifile-mode (quote auctex))))
#+END_SRC


*** Reftex

[[http://www.gnu.org/software/auctex/manual/reftex.html#SEC2][RefTex website]]. Useful for managing cross references, bibliographies, indices, and document navigation.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :ensure t
  :defer t
  :bind ("C-c =" . reftex-toc)
  :config
  (setq reftex-cite-prompt-optional-args t) ; Prompt for empty optional arguments in cite
  ;; https://www.gnu.org/software/emacs/manual/html_mono/reftex.html
  (setq reftex-enable-partial-scans t)
  (setq reftex-keep-temporary-buffers nil)
  (setq reftex-save-parse-info t)
  (setq reftex-trust-label-prefix '("fig:" "eq:")))
#+END_SRC


*** Flycheck


#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t 
  :commands flycheck-mode
  :init
  (add-hook 'prog-mode-hook 'flycheck-mode)
  :config

  (flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

  (add-to-list 'flycheck-checkers 'proselint)
  )
#+END_SRC


*** Flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :bind ("S-<f6>" . flyspell-mode)
  :config
  
  ;; path to Aspell
  (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
  ;; use aspell
  (setq ispell-program-name "aspell")
  ;; where the dictionay is
  ;; (setq ispell-personal-dictionary "c:/Program Files (x86)/Aspell/dict")
  ;; change dictionaries
  (defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "brasileiro") "english" "brasileiro")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))
  (global-set-key (kbd "<f6>")   'fd-switch-dictionary)
  (global-set-key (kbd "C-<f1>") 'flyspell-correct-word-before-point)


  (use-package auto-dictionary
    :ensure t
    :config
    (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))
  
  (setq ispell-dictionary "brasileiro")
)
#+END_SRC


*** Company
Auto complete

The configurations were taken from [[https://github.com/company-mode/company-mode/issues/68][This discussion]]. The delay time from the wiki. This [[https://www.reddit.com/r/emacs/comments/3s5bkf/companymode_configuration_make_editing_slow/][reddit thread]] has some cool configurations. [[https://github.com/manugoyal/.emacs.d#company-mode][Company capf is problematic?]]

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :commands company-mode
  :init
  (add-hook 'prog-mode-hook 'company-mode)
  :config
  (setq company-idle-delay 0.5)
  (setq company-show-numbers t)

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))
  
  ;; Also these lines are useful to trigger the completion 
  ;; pressing the key you want.
  (global-set-key [backtab] 'tab-indent-or-complete)
  
)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package company-statistics 
    :ensure t
    :after company
    :config
    (company-statistics-mode))
#+END_SRC



#+BEGIN_SRC emacs-lisp
(use-package company-flx
  :ensure t
  :after company
  :config
  (company-flx-mode +1))
#+END_SRC

*** Undo tree 


Undo system to recover any past state of a buffer.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t 
  :bind ("C-z" . undo-tree-undo)
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t)))
#+END_SRC


*** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t 
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTex-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  )
#+END_SRC




*** +Rainbow blocks+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package rainbow-blocks
  :ensure t
  :defer t)
#+END_SRC
*** +Pdf tools+

-From the larslj's  [[https://github.com/larslj/pdf-tools/tree/windows][windows branch]].- 

#+BEGIN_SRC emacs-lisp  :tangle no
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-tools-install)
  :bind ("C-c C-g" . pdf-sync-forward-search)
  :config
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-view-resize-factor 1.10))
#+END_SRC


*** Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish (which-key-mode)
  :config
  (which-key-mode))
#+END_SRC




*** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :if (not noninteractive)
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'org-mode-hook #'yas-minor-mode)
(define-key yas-minor-mode-map (kbd "TAB") nil))
#+END_SRC


*** Key chord

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :defer 10
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.1)
  (key-chord-define-global "]]" "\\")
  (key-chord-define-global ";;" "/")
  (key-chord-define-global "::" "?")
  (key-chord-define-global "}}" "|"))
#+END_SRC

*** Neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind ("<f8>" . neotree-toggle)
  :config
  (setq neo-smart-open t)
  (setq neo-vc-integration nil)
  ;; Do not allow neotree to be the only open window
  (setq-default neo-dont-be-alone t)
  (setq neo-fit-to-contents nil)
  
  (setq neo-theme 'arrow)
  (setq neo-window-fixed-size nil))
#+END_SRC

*** All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
    :ensure t
    :after neotree)
#+END_SRC



*** Smart mode line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :config
  (setq sml/theme 'respectful)
  (sml/setup))
#+END_SRC

*** Dired +

#+BEGIN_SRC emacs-lisp
(use-package dired+
  :ensure t)
#+END_SRC


*** imenu list


#+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation t))
#+END_SRC

*** Expand region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

*** Iedit

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t
  :bind* ("C-;" . iedit-mode))
#+END_SRC
*** Go to last change

#+BEGIN_SRC emacs-lisp
(use-package goto-last-change
  :ensure t
  :bind ("C-x C-j" . goto-last-change))
#+END_SRC
*** web mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.js\\'" . web-mode)
         ("\\.mustache\\'" . web-mode))
  :config
  (add-hook 'web-mode-hook 'smartparens-mode)
  (use-package smartparens-html))
#+END_SRC

*** Highlight symbol


#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :commands highlight-symbol-mode
  :init
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  :config
  ;; (custom-set-faces 
  ;;  '(highlight-symbol-face ((((class color) (background light)) 
  ;;                            (:background "papaya whip")))))
)
#+END_SRC


*** Highlight paren mode

#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses
  :ensure t
  :config
  (global-highlight-parentheses-mode t))
#+END_SRC

*** Ibuffer

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure t
  :config
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t))
#+END_SRC

*** Irony 

#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :mode ("\\.c\\'" . irony-mode)
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  :config
  ;; Windows performance tweaks
  ;;
  (when (boundp 'w32-pipe-read-delay)
    (setq w32-pipe-read-delay 0))
  ;; Set the buffer size to 64K on Windows (from the original 4K)
  (when (boundp 'w32-pipe-buffer-size)
    (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
)
#+END_SRC

*** +Golden Ratio+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package golden-ratio
  :ensure t
  :config
  (golden-ratio-mode 1))
#+END_SRC

*** Matlab mode

#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :ensure t
  :mode ("\\.m\\'" . matlab-mode))
#+END_SRC

* Misc
** +Doc view keybindings+

#+begin_src emacs-lisp :tangle no
(use-package doc-view
  :config
  (add-hook 'doc-view-mode-hook (lambda () (centered-cursor-mode -1)))
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page)
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (global-set-key (kbd "C-<wheel-up>") 'doc-view-enlarge)
  (global-set-key (kbd "C-<wheel-down>") 'doc-view-shrink)

  (setq doc-view-continuous t))
#+end_src
** W32 browser


#+BEGIN_SRC emacs-lisp
(use-package w32-browser
  :load-path "c:/users/Nasser/.emacs.d/elpa/")
#+END_SRC



** +Auto dim other buffer+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package auto-dim-other-buffers
  :ensure t
  :init
  (add-hook 'after-init-hook (lambda ()
                             (when (fboundp 'auto-dim-other-buffers-mode)
                               (auto-dim-other-buffers-mode t))))
  :config
  (set-face-background 'auto-dim-other-buffers-face "gray95")
  )
#+END_SRC


** Remove ad-handle message
#+BEGIN_SRC emacs-lisp
(setq ad-redefinition-action 'accept)
#+END_SRC

** Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC



** Autorevert mode

Update file in buffer, refresh.

#+BEGIN_SRC emacs-lisp 
(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+END_SRC

** Key M-\ to M-] delete horizontal space

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-]") 'delete-horizontal-space)
#+END_SRC

** minibuffer

Minibuffer window expands vertically as necessary to hold the text
that you put in the minibuffer

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t) ;; was grow-only
#+END_SRC

** Activate window on another frame

mouse auto select to make active the buffer where the mouse pointer is hovering, and focus follows to work with other emacs frames. Useful to scroll pdf on different frames

#+BEGIN_SRC emacs-lisp
(setq focus-follows-mouse t)
(setq mouse-autoselect-window t)
#+END_SRC


** Scrooling

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mous
#+END_SRC
** Moving to end of line or block

http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html

#+BEGIN_SRC emacs-lisp
(defun xah-beginning-of-line-or-block ()
  "Move cursor to beginning of line, or beginning of current or previous text block.

• When called first time, move cursor to beginning of line.
• When called again, move cursor to beginning of paragraph.
• When called again, move cursor to beginning of previous paragraph.

URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
Version 2017-01-17"
  (interactive)
  (if (or (equal (point) (line-beginning-position))
          (equal last-command this-command ))
      (if (re-search-backward "\n[\t\n ]*\n+" nil "NOERROR")
          (skip-chars-backward "\n\t ")
        (goto-char (point-min)))
    (beginning-of-line)))


(defun xah-end-of-line-or-block ()
  "Move cursor to end of line, or end of current or next text block.

• When called first time, move cursor to end of line.
• When called again, move cursor to end of paragraph.
• When called again, move cursor to end of next paragraph.

URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
Version 2017-01-17"
  (interactive)
  (if (or (equal (point) (line-end-position))
          (equal last-command this-command ))
      (if (equal (point) (line-end-position))
          (re-search-forward "\n[\t\n ]*\n+" nil "NOERROR" )
        (end-of-line))
    (end-of-visual-line)))

(require 'bind-key)

;; (global-set-key (kbd "C-a") 'xah-beginning-of-line-or-block)
;; (global-set-key (kbd "C-e") 'xah-end-of-line-or-block)
(bind-key* "C-e" 'xah-end-of-line-or-block)
(bind-key* "C-a" 'xah-beginning-of-line-or-block)
#+END_SRC










