#+TITLE: Emacs Configuration
#+AUTHOR: Nasser Alkmim

* Introduction
This conficuration was copied and modified from [[https://github.com/danielmai/.emacs.d][Daniel's configuration]].

Download [[http://vgoulet.act.ulaval.ca/en/emacs/windows/][Emacs]] from this site which includes the support for png, jpeg images. Or [[http://emacsbinw64.sourceforge.net/][From this site]].
  
This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations. This [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][post]] explain how it works.

This [[http://emacs.stackexchange.com/questions/10396/difference-between-init-and-config-in-use-package][Question]] is useful to understand the differences between init and config. Basically, bind and init are evaluated immediately after start up which contributes to startup time, config is deferred until the pacakge is loaded (by a bind key or a specific mode).

Current load time 1.5s on windows.

* Personal information

 #+begin_src emacs-lisp
(setq user-full-name "Nasser Alkmim"
      user-mail-address "nasser.alkmim@gmail.com")
#+end_src

* Theme
** Moe theme
#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :ensure t
  :defer t
  :init
  (require 'moe-theme)
)
#+END_SRC
** Leuven theme
#+BEGIN_SRC emacs-lisp
(use-package leuven-theme
  :ensure t
  :defer t)
#+END_SRC
** Anti Zenburn
#+BEGIN_SRC emacs-lisp
(use-package anti-zenburn-theme
  :ensure t
  :init
  (load-theme 'anti-zenburn t))
#+END_SRC
** Material theme

#+begin_src emacs-lisp
(use-package material-theme
  :defer t
  :ensure t)  
#+end_src

** Cyberpunk theme

#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :defer t
  :ensure t)
#+END_SRC

** Zenburn
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :defer t
  :ensure t)
#+END_SRC
** Solarized 
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :defer t)
#+END_SRC
** Sanityinc tomorrow
#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t)
#+END_SRC
** Theme looper

#+begin_src emacs-lisp
(use-package theme-looper
  :defer t
  :ensure t
  :bind ("S-<f12>" . theme-looper-enable-next-theme)
  :init
  (theme-looper-set-theme-set '(moe-light
                                ;moe-dark
                                leuven
                                anti-zenburn
                                ;material
                                ;material-light
                                ;zenburn
                                cyberpunk
                                ;solarized-light
                                ;sanityinc-tomorrow-day
                                ))
  (theme-looper-set-customizations 'powerline-reset))
#+end_src

the function load-theme will first disable the active themes, before loading the new one.

#+BEGIN_SRC emacs-lisp
(defun disable-all-themes ()
  "disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes))
#+END_SRC

* Font
Download [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro" :height 100)
#+end_src

* Common defaults

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
;; from Sacha page
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
(setq-default indent-tabs-mode nil)

;; use shift-arrows to move between windows
(windmove-default-keybindings)

;; highlight current line
(global-hl-line-mode 1)

; wrap lines
(global-visual-line-mode)
(diminish 'visual-line-mode)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)


(column-number-mode t)


(setq uniquify-buffer-name-style 'forward)


;; Don't beep at me
(setq visible-bell t)

;; Don't create backups
(setq make-backup-files nil)
#+end_src

* Recentf
Recentf is a minor mode that builds a list of recently opened files.

#+begin_src emacs-lisp
(use-package recentf
  :defer 10
  :config
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 15)))
#+end_src

* Org mode
** Basic Initialization

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :defer t
  :bind(("C-c a" . org-agenda)
        ("C-c l" . org-store-link)
        ("C-c c" . org-capture))
  :config
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'flycheck-mode))
#+END_SRC

** Modules

Modules to experiment in my workflow.

#+BEGIN_SRC emacs-lisp
(setq org-modules '(org-habit))

(eval-after-load 'org
 '(org-load-modules-maybe t))
#+END_SRC

*** Habits

A special category of TODO's, habits. A habit is a task that is constantly repeating. In my case, I plan to use it for:

1. Books that I am reading, reading every day.
2. My thesis progress.

Some properties:
- blue if the task wasn't to be done yet
- green if the task could have been done on that day
- yellow if the task was going to be overdue the next day
- red if the task was overdue on that days
- asterisk if the task was done on that day!
- exclamation show where the current day falls in the graph

From [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha]].

#+BEGIN_SRC emacs-lisp
(setq org-habit-graph-column 80)
;(setq org-habit-show-habits-only-for-today nil)
#+END_SRC

** Shortcut to organizer file

From [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][This blog entry]], C-c o is set to open the tasks.org

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "~/OneDrive/Org/notes.org")))
#+END_SRC

** Agenda

Set agenda files

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/OneDrive/Org/gtd.org"
                      "~/OneDrive/Org/notes.org"
                      "~/OneDrive/Org/culture.org"
                      "~/OneDrive/ANAC/anac.org"
))))
#+END_SRC

remove done tasks from the agenda, from [[http://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view][this question]].

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-skip-deadline-if-done t))
#+END_SRC

** Capture

Set gtd.org as my default notes file

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/OneDrive/Org/gtb.org")
#+END_SRC

*** Capture templates

The templates were copied from [[http://members.optusnet.com.au/~charles57/GTD/datetree.html][This Tutorial]].

So far I have the following templates:
1. *Todo*: will be used for defining daily or weekly tasks and reminders.
   - TODO keyword
   - %^{Description} prompt for user input
   - %^g prompt for tags
   - %? position cursor here
   - %U inactive timestamp
2. *Notes*: Any kind of note, books, movies, blog post ideas.
   - %^{Description} prompt for user input
   - %^g prompt for tags
   - %? position cursor here
   - %U inactive timestamp
3. *Books*: Save books that I'm reading, scheduled than so I read the minimum quota daily, notes and review.


#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(
("t" "Todo" entry (file+datetree "~/OneDrive/Org/gtd.org") 
"* TODO %?

Added: %U")

("n" "Notes" entry (file+datetree "~/OneDrive/Org/notes.org") 
"* %^{Description} %^g 

%?
 
Added: %U")

("b" "Books" entry (file+headline "~/OneDrive/Org/culture.org" "Books")
"* STRT %^{Title} 
SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a +1d>>\")
:PROPERTIES:
:STYLE:    habit
:END:


,*Author(s):* %^{Author}
,*Pages/Day:* %^{P/D}
,*Review/Comments:*

%?

,*Added*: %U" )

("m" "Movies" entry (file+headline "~/OneDrive/Org/culture.org" "Movies")
"* %^{Title}

,*Review/Comments:*

%?

,*Added*: %U"
)

("p" "Post" plain (file  (blog-post-new))
 "Title: %^{Title}
Date: %<%Y-%m-%d %H:%M>
Category: %^{Category}
Tags: %^{Tags}

%?

"
)
      
))
#+END_SRC

** Options

Start up folded, lists will be folded when file is opened. Don't remember where I got that.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-include-plain-lists 'integrate)
#+END_SRC

Org display inline images when starts up, [[http://emacs.stackexchange.com/questions/14758/in-org-mode-how-to-always-display-inline-images-at-emacs-startup][From this question]].
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

Speed up commands. See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for speed keys in Org mode]].
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

General options.
#+BEGIN_SRC emacs-lisp
(setq org-special-ctrl-a/e t)
(transient-mark-mode nil)
(setq org-log-done 'time) ;Log the time a task is completed.
(setq org-habit-graph-column 50) ;position the habit graph on the agenda to the right of the default
(setq org-hide-emphasis-markers nil)
(setq org-src-fontify-natively t)
(setq inhibit-splash-screen t)
(setq org-indent-mode t) ;indent the headings for clean view
(diminish 'org-indent-mode)
(setq org-startup-indented t)
(setq org-tags-column -96) ;where the tags are places
 #+END_SRC

Todo sequences.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "STRT(s)" "DONE(d)")))
(setq org-todo-keyword-faces 
      '(
         ("TODO" :background "tomato" :foreground "#5f5f5f" :weight bold )
         ("STRT" :background "#edd400" :foreground "#5f5f5f" :weight bold )
         ("DONE" :background "#6ac214" :foreground "#5f5f5f" :weight bold )))
#+END_SRC

From [[http://stackoverflow.com/questions/28351465/emacs-orgmode-do-not-insert-line-between-headers][This question]], an option for org mode not insert a line between headings.
#+BEGIN_SRC emacs-lisp
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
#+END_SRC

[[http://orgmode.org/manual/Headlines.html][This reference]] is used to remove an annoying feature of not hiding extra lines in a subtree
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC


** Org babel/source blocks

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org paste from clipboard

Function for pasting images from clipboard. I got this from [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-11/msg00290.html][this thread]]. It's very useful when I'm writing notes while studying, great for reviewing the notes later.

Now it creates a folder called "img/" where all the figures are going to be saved.

#+BEGIN_SRC emacs-lisp
(defun my/org-insert-clipboard ()
  (interactive)
  ;make the img directory
  (setq myvar/folder-path (concat default-directory "img/"))
  ;create the directory if it doesn't exist
  (if (not (file-exists-p myvar/folder-path))
      (mkdir myvar/folder-path))

  (let* ((image-file (concat 
                      myvar/folder-path
                      (buffer-name)
                      "_"
                      (format-time-string "%Y%m%d_%H%M%S_.png")))

	 (exit-status
	  (call-process "convert" nil nil nil
			"clipboard:" image-file)))

    (org-insert-link nil (concat "file:" image-file) "")

    (org-display-inline-images)))

(global-set-key (kbd "C-c y") 'my/org-insert-clipboard)
#+END_SRC

** Org BG level 1 and 2
This is for remove the annoying background color on the headings, level 1 and level 2, when using the material-theme.

#+BEGIN_SRC emacs-lisp
(custom-set-faces

  '(org-level-1 ((t (:background nil :bold t :overline nil))))

  '(org-level-2 ((t (:background nil :bold t :overline nil)))))
#+END_SRC
** Org pomodoro

[[https://github.com/lolownia/org-pomodoro][This package]] adds the pomodoro (timer) technique into org-mode. I'll try it for studying.

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :ensure t
  :bind ("<f12>" . org-pomodoro))
#+END_SRC
** Blog post

This is an attempt to create a workflow for blog posts, the referece is this [[http://pasoev.github.io/programming/2015/10/31/jekyll-posts-emacs-capture/][Blog post]].

First a function to return the date of the blog post.
#+BEGIN_SRC emacs-lisp
(defun today-date ()
  (format-time-string "%Y-%m-%d"))
#+END_SRC

A function to ask for the post title
#+BEGIN_SRC emacs-lisp
(defun blog-title ()
  (interactive)
  (read-string "Blog title: "))
#+END_SRC

A function for creating a markdown file with the name based on the date and a title which should be at the top of the kill-ring.
#+BEGIN_SRC emacs-lisp
(defun blog-post-new ()
  (let ((title
         (blog-title)))
  (concat (file-name-as-directory "C:/Users/Nasser/Onedrive/nasseralkmim.github.io/blog/content")
          (today-date) "-" title ".md")))
#+END_SRC

* Shell

#+begin_src emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)
#+end_src

* ELPA packages
** Ace Jump Mode
   
A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-x C-x" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("C-o" . ace-window))
#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (require 'helm-config)
  :config 
  (helm-mode)
  (helm-autoresize-mode t)
  (setq helm-display-header-line nil)
  (setq helm-split-window-in-side-p t)
  (bind-key "<tab>" #'helm-execute-persistent-action helm-map)

  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-x f"   . helm-multi-files)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+end_src
   
** Helm swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper-helm
  :bind (("C-s" . swiper-helm)
         ("C-r" . swiper-helm))
  :ensure t
  :config
  (setq swiper-helm-display-function 'helm-default-display-buffer))
#+END_SRC
** Magit


A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Emacs IPython Notebook

#+begin_src emacs-lisp
(use-package ein
  :defer t
  :disabled t
  :ensure t)
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Projectile

From John Wiegley.


#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-global-mode
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (use-package helm-projectile
    :config
    (setq projectile-completion-system 'helm)
    (helm-projectile-on)
    (setq projectile-indexing-method 'alien))
  (projectile-global-mode))
#+end_src

** Python

Integrates with Python.

#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :ensure t
  :config
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'python-mode-hook 'flycheck-mode))
#+end_src

** Smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config
  (use-package smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
  (sp-local-pair 'org-mode "_" "_" )
  (sp-local-pair 'org-mode "*" "*" ))
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :defer t
  :disabled t
  :ensure t)
#+end_src

** AucTex
*** Basic setup

Enable [[https://www.gnu.org/software/auctex/manual/auctex.html][Auctex]] when files with .tex are loaded. Tex-master is  useful to make Auctex aware of multi-files documents. TeX-PDF mode is used to compile using pdflatex.

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :config
  (load "auctex.el" nil nil t)
  (setq global-font-lock-mode t)
  (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'flycheck-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'company-mode)
  (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
  (setq reftex-plug-into-AUCTeX t)
  (setq-default TeX-PDF-mode t)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil))
#+end_src

*** Latex preview pane

shell-escape mode because the pacakge svg requires it.

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :ensure t
  :bind ("M-p" . latex-preview-pane-mode)
  :config
  (setq doc-view-ghostscript-program "gswin64c")
  (custom-set-variables
   '(shell-escape-mode "-shell-escape")))
#+END_SRC

*** Folding 

[[https://www.gnu.org/software/auctex/manual/auctex/Folding.html][From this manual]], folding macros and environments to avoind clutter.

#+BEGIN_SRC emacs-lisp
;; activate fold mode
;(add-hook 'LaTeX-mode-hook (lambda ()
;                             (TeX-fold-mode 1)))
; hide foldable items automatically
;(add-hook 'find-file-hook 'TeX-fold-buffer t)
#+END_SRC

*** Outline document

[[http://www.gnu.org/software/auctex/manual/auctex/Outline.html][From this section of the manual]], outline for better view content.

#+BEGIN_SRC emacs-lisp
;(add-hook 'LaTeX-mode-hook 'outline-minor-mode)
#+END_SRC

** Reftex

[[http://www.gnu.org/software/auctex/manual/reftex.html#SEC2][RefTex website]]. Useful for managing cross references, bibliographies, indices, and document navigation.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :ensure t)
#+END_SRC

** Magic Latex Buffer
#+begin_src emacs-lisp
(use-package magic-latex-buffer
  :load-path ("C:/Users/Nasser/.emacs.d/elpa/magic-latex-buffer-master")
  :config
  (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
  (setq magic-latex-enable-block-highlight nil
      magic-latex-enable-suscript        t
      magic-latex-enable-pretty-symbols  t
      magic-latex-enable-block-align     nil
      magic-latex-enable-inline-image    nil))
#+end_src

** Flycheck


#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :bind ("S-<f5>" . flycheck-mode))
#+END_SRC



** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :bind ("S-<f6>" . flyspell-mode)
  :config
  ;; path to Aspell
  (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
  ;; use aspell
  (setq ispell-program-name "aspell")
  ;; where the dictionay is
  (setq ispell-personal-dictionary "C:/Program Files (x86)/Aspell/dict")
  ;; change dictionaries
  (defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "brasileiro") "english" "brasileiro")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))
  (global-set-key (kbd "<f6>")   'fd-switch-dictionary)
  (global-set-key (kbd "C-<f1>") 'flyspell-correct-word-before-point))
#+END_SRC
** Company
Auto complete

The configurations were taken from [[https://github.com/company-mode/company-mode/issues/68][This discussion]]. The delay time from the wiki. This [[https://www.reddit.com/r/emacs/comments/3s5bkf/companymode_configuration_make_editing_slow/][reddit thread]] has some cool configurations.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :config
  (setq company-idle-delay 0)
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 2))
#+END_SRC
** Undo tree


Undo system to recover any past state of a buffer
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :ensure t
  :bind ("C-z" . undo-tree-undo)
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Workgroups

[[https://github.com/pashinin/workgroups2][Work Groups]] for emacs, it saves sessions.

1. ~C-c z C-f~ to laod and start workgroups
2. ~C-c z v~ switch to workgroup
3. ~C-c z c~ create workgroup
4. ~C-c z k~ kill workgroup
5. ~C-c z C-s~ save session


#+BEGIN_SRC emacs-lisp
(use-package workgroups2
  :ensure t
  :bind (("C-c 1" . wg-reload-session)
         ("C-c 2" . wg-switch-to-workgroup)
         ("C-c z z" . wg-save-session))
  :config
  (workgroups-mode 1))
  #+END_SRC
** Centered cursor

#+BEGIN_SRC emacs-lisp
(use-package centered-cursor-mode
  :ensure t
  :diminish centered-cursor-mode
;  :disabled t
  :config
  (global-centered-cursor-mode +1))
#+END_SRC

* Misc
** Doc view keybindings

#+begin_src emacs-lisp
(use-package doc-view
  :config
  (add-hook 'doc-view-mode-hook (lambda () (centered-cursor-mode -1)))
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page)
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (global-set-key (kbd "C-<wheel-up>") 'doc-view-enlarge)
  (global-set-key (kbd "C-<wheel-down>") 'doc-view-shrink)

  (setq doc-view-continuous t))
#+end_src

** Remove ad-handle message
#+BEGIN_SRC emacs-lisp
(setq ad-redefinition-action 'accept)
#+END_SRC
